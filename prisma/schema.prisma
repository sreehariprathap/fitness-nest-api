// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @unique @default(autoincrement())
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash String

  firstName String?
  lastName String?

  gender String?

  fitness Fitness[]
  intakes FoodIntake[]
  workouts WorkOut[]
  todos Todos[]
  goals Goals[]
  weights Weights[]
  
  @@map("users")
}

model Fitness {
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  weight String?
  height String?
  bmi String?
  caloriesPerDay String?
  age Int
  
  userId Int
  user User @relation(fields: [userId],references: [id])
  @@map("fitness")
}

model FoodIntake {
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  calories String

  foodItem String

  userId Int
  user User @relation(fields: [userId],references: [id])
  @@map("intakes")
}
model WorkOut {
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  caloriesBurned String?
  workoutName String?
  
  userId Int
  user User @relation(fields: [userId],references: [id])
  @@map("workouts")
}

model Todos {
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String?
  description String?
  status Boolean?
  date DateTime?

  userId Int
  user User @relation(fields: [userId],references: [id])

  @@map("todos")
}

model Goals {
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  description String?
  status String?
  year String?
  

  userId Int
  user User @relation(fields: [userId],references: [id])

  @@map("goals")
}

model Weights {
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  weight Int

  userId Int
  user User @relation(fields: [userId],references: [id])
  @@map("weight")
}

